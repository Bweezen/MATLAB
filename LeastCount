LEAST COUNT METHOD

% QUESTION 1 (least cost method)

a = [12 25 20];                       % supply
b = [25 10 15 5];                     % demand
c = [2 10 4 5; 6 12 8 11; 3 39 5 7];  %cost matrix
m = size(c,1)
n = size(c,2)

if (sum(a) == sum(b))
    fprintf('The problem is balanced')
else
    fprintf('The problem is unbalanced')
    if (sum(a)<sum(b))
        m=m+1;
        c(end+1,:) = zeros(1,length(b))
        a(end+1) = sum(b) - sum(a)
    else sum(a) > sum(b)
        n=n+1;
        c(:,end+1) = zeros(length(a),1)
        b(end+1) = sum(a)-sum(b)
    end
end
X = zeros(m,n)
InitialC = c
for i=1:size(c,1)
    for j=1:size(c,2)
        cpq = min(c(:))
        if cpq == inf
            break
        end
        [p1,q1] = find(cpq==c)
        a(p1); b(q1);
        xpq = min(a(p1),b(q1));
        X(p1,q1)
        [X(p1,q1),ind] = max(xpq);
        p = p1(ind)
        q = q1(ind)
        X(p,q) = min(a(p),b(q))
        if X(p,q) == a(p)
            b(q) = b(q)-a(p);
            a(p) = a(p)-X(p,q);
            c(p,:) = inf;
        else
            X(p,q) == b(q);
            a(p)=a(p)-b(q);
            b(q)=b(q)-X(p,q);
            c(:,q) = inf;
        end
    end
end
z = 0;
for i=1:size(c,1)
    for j=1:size(c,2)
        z=z+X(i,j)*InitialC(i,j)
    end
end
fprintf('Answer of least cost matrix is %f\n',z)
